class Marker {
    field Point _position;
    field boolean _prevPosLight;
    field boolean _isSelMarker;

    //
    // Ctors/Dtors
    //
    constructor Marker new(Point position, boolean isSelMarker) {
        let _position       = position;
        let _prevPosLight   = true;
        let _isSelMarker    = isSelMarker;
        return this;
    } 

    method void dispose() {
        do _position.dispose();
        do Memory.deAlloc(this);
        return;
    }

    //
    // Getters/Setters
    //
    method Point getPosition() {
        return _position;
    }

    //
    // Methods
    //
    
    method void draw() {
		var int location;
        var boolean onLight;

        let onLight = ChessPieceHelper.onLight(_position);
        let location = (32 * (_position.getY() + 4)) + ((_position.getX() + 6) / 16);   // calc location in mem
        let _prevPosLight = onLight;

		if(onLight) {
            if(~_isSelMarker) {
			    do drawMarkerOnLight(location);
            }
            else {
                do drawSelMarkerOnLight(location);
            }
		}
		else {
            if(~_isSelMarker) {
			    do drawMarkerOnDark(location);
            }
            else {
                do drawSelMarkerOnDark(location);
            }
		}

        
		return;
    }

	method void drawMarkerOnLight(int location) {
        var int memAddress;
        let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 9);
		do Memory.poke(memAddress+32, 10);
		do Memory.poke(memAddress+64, 12);
		do Memory.poke(memAddress+96, 15);
		
		return;
    }

	method void drawMarkerOnDark(int location) {
		var int memAddress;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, -10);
		do Memory.poke(memAddress+32, -11);
		do Memory.poke(memAddress+64, -13);
		do Memory.poke(memAddress+96, -16);
		
		return;
	}

    method void drawSelMarkerOnLight(int location) {
        var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, -28672);
	    do Memory.poke(memAddress+32, 20480);
	    do Memory.poke(memAddress+64, 12288);
	    do Memory.poke(memAddress+96, -4096);
        return;
    }

    method void drawSelMarkerOnDark(int location) {
        var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, 28671);
	    do Memory.poke(memAddress+32, -20481);
	    do Memory.poke(memAddress+64, -12289);
	    do Memory.poke(memAddress+96, 4095);
        return;
    }

    // @TODO: Do bounds checking
    method void moveRight() {
        let _position = Point.new(_position.getX() + 32, _position.getY());
        do draw();

        return;        
    }

    method void moveLeft() {
        let _position = Point.new(_position.getX() - 32, _position.getY());
        do draw();

        return;
    }

    method void moveUp() {
        let _position = Point.new(_position.getX(), _position.getY() - 32);
        do draw();

        return;
    }

    method void moveDown() {
        let _position = Point.new(_position.getX(), _position.getY() + 32);
        do draw();

        return;
    }

    
    method ChessPiece select(boolean isClearTurn, Array clearPieces, Array stripePieces) {    
        var ChessPiece selectedPiece;

        let selectedPiece = ChessPieceHelper.getByPosition(clearPieces, stripePieces, _position);
        if(~(selectedPiece = null)) {
            if(isClearTurn = selectedPiece.getIsClear()) {
                return selectedPiece;
            }
        }
        
        return null;
    } 

}