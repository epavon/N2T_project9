class King {
    field boolean _clearTeam;
    field boolean _isAlive;
    field Point _position;

    constructor King new(Point position, boolean clearTeam) {
        let _position = position;
        let _clearTeam = clearTeam; 
        let _isAlive = true;
        return this;
    }

    method void dispose() {
        do _position.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void draw(boolean onLight) {
        var int location, x, y, xLoc, yLoc;

        let x = _position.getX();
        let y = _position.getY();
        let xLoc = x + 16;                          // offset to place in center of square
        let yLoc = y + 8;
        let location = (32 * yLoc) + (xLoc / 16);   // calc location in mem

        if(_clearTeam) {
            if(onLight) {
                do drawClearOnLight(location);
            }
            else {
                do drawClearOnDark(location);
            }
        }
        else {
            if(onLight) {
                do drawStripeOnLight(location);
            }
            else {
                do drawStripeOnDark(location);
            }
        }
        
        return;
    }

    method void drawClearOnLight(int location) {
        var int memAddress;
	    let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, 448);
	    do Memory.poke(memAddress+32, 544);
	    do Memory.poke(memAddress+64, 448);
	    do Memory.poke(memAddress+96, 128);
	    do Memory.poke(memAddress+128, 992);
	    do Memory.poke(memAddress+160, 2184);
	    do Memory.poke(memAddress+192, 4088);
	    do Memory.poke(memAddress+224, 544);
	    do Memory.poke(memAddress+256, 448);
	    do Memory.poke(memAddress+288, 128);
	    do Memory.poke(memAddress+320, 1904);
	    do Memory.poke(memAddress+352, 320);
	    do Memory.poke(memAddress+384, 320);
	    do Memory.poke(memAddress+416, 1584);
	    do Memory.poke(memAddress+448, 6156);
	    do Memory.poke(memAddress+480, 8188);
	    return;
    }

    method void drawClearOnDark(int location) {
        var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, -449);
	    do Memory.poke(memAddress+32, -545);
	    do Memory.poke(memAddress+64, -449);
	    do Memory.poke(memAddress+96, -129);
	    do Memory.poke(memAddress+128, -993);
	    do Memory.poke(memAddress+160, -2185);
	    do Memory.poke(memAddress+192, -4089);
	    do Memory.poke(memAddress+224, -545);
	    do Memory.poke(memAddress+256, -449);
	    do Memory.poke(memAddress+288, -129);
	    do Memory.poke(memAddress+320, -1905);
	    do Memory.poke(memAddress+352, -321);
	    do Memory.poke(memAddress+384, -321);
	    do Memory.poke(memAddress+416, -1585);
	    do Memory.poke(memAddress+448, -6157);
	    do Memory.poke(memAddress+480, -8189);
	    return;
    }

    method void drawStripeOnLight(int location) {
        var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, 448);
	    do Memory.poke(memAddress+32, 672);
	    do Memory.poke(memAddress+64, 448);
	    do Memory.poke(memAddress+96, 128);
	    do Memory.poke(memAddress+128, 992);
	    do Memory.poke(memAddress+160, 2184);
	    do Memory.poke(memAddress+192, 4088);
	    do Memory.poke(memAddress+224, 672);
	    do Memory.poke(memAddress+256, 448);
	    do Memory.poke(memAddress+288, 128);
	    do Memory.poke(memAddress+320, 1904);
	    do Memory.poke(memAddress+352, 448);
	    do Memory.poke(memAddress+384, 320);
	    do Memory.poke(memAddress+416, 2032);
	    do Memory.poke(memAddress+448, 6156);
	    do Memory.poke(memAddress+480, 8188);
	    return;
    }

    method void drawStripeOnDark(int location) {
        var int memAddress;
        let memAddress = 16384+location;
	    do Memory.poke(memAddress+0, -449);
	    do Memory.poke(memAddress+32, -673);
	    do Memory.poke(memAddress+64, -449);
	    do Memory.poke(memAddress+96, -129);
	    do Memory.poke(memAddress+128, -993);
	    do Memory.poke(memAddress+160, -2185);
	    do Memory.poke(memAddress+192, -4089);
	    do Memory.poke(memAddress+224, -673);
	    do Memory.poke(memAddress+256, -449);
	    do Memory.poke(memAddress+288, -129);
	    do Memory.poke(memAddress+320, -1905);
	    do Memory.poke(memAddress+352, -449);
	    do Memory.poke(memAddress+384, -321);
	    do Memory.poke(memAddress+416, -2033);
	    do Memory.poke(memAddress+448, -6157);
	    do Memory.poke(memAddress+480, -8189);
	    return;
    }
}