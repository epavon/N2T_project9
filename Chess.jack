
/**
 * >>> Description <<<
 * This class controls the chess game and logic
 * Board consists of 64 32x32 pixel squares with origin at (122,0)
 *    _______________________
 * 1 |__|__|__|__|__|__|__|__|
 * 2 |__|__|__|__|__|__|__|__|
 * 3 |__|__|__|__|__|__|__|__|
 * 4 |__|__|__|__|__|__|__|__|
 * 5 |__|__|__|__|__|__|__|__|
 * 6 |__|__|__|__|__|__|__|__|
 * 7 |__|__|__|__|__|__|__|__|
 * 8 |__|__|__|__|__|__|__|__|
 *    A  B  C  D  E  F  G  H  
 *
 * >>> Controls <<<
 * ARROW KEYS:  control movement between pieces 
 * SPACEBAR:    A piece can be selected to be moved by pressing SPACEBAR
 *              Once selected you can use the arrow keys to the new position 
 *              for selected piece and press Enter again to move to desired 
 *              position.
 * X :          To cancel a selection, press X
 **/

class Chess {
    field int xStart;
    field boolean gameEnd;
    field boolean isClearTurn;
    field Marker _curPosMarker;

    // Clear pieces
    field Array clearPieces; 
    
    // Stripe pieces
    field Array stripePieces;

    //
    // Ctor / Dtor
    //
    constructor Chess new() {
        var int i, pawnType, rookType, kingType, queenType, bishopType, knightType;
        var Pawn curPawn;      

        let rookType    = ChessPieceHelper.getRookType();
        let pawnType    = ChessPieceHelper.getPawnType();
        let kingType    = ChessPieceHelper.getKingType();
        let queenType   = ChessPieceHelper.getQueenType();
        let bishopType  = ChessPieceHelper.getBishopType();
        let knightType  = ChessPieceHelper.getKnightType();

        let i           = 0;
        let xStart      = 122;
        let gameEnd     = false;
        let isClearTurn = true;        

        let _curPosMarker   = Marker.new(Point.new(xStart, 32));        
        let clearPieces     = Array.new(16);
        let stripePieces    = Array.new(16);

        // init pawns
        while(i < 8) {                    
            let clearPieces[i] = ChessPiece.new(Point.new(xStart + (32*i), 32), true, pawnType);            
            let stripePieces[i] = ChessPiece.new(Point.new(xStart + (32*i), 192), false, pawnType); 
            let i = i + 1;
        }        

        // init rooks      
        let clearPieces[8]  = ChessPiece.new(Point.new(xStart, 0), true, rookType);
        let stripePieces[8] = ChessPiece.new(Point.new(xStart, 224), false, rookType);
        let clearPieces[9]  = ChessPiece.new(Point.new(xStart + (32*7), 0), true, rookType);
        let stripePieces[9] = ChessPiece.new(Point.new(xStart + (32*7), 224), false, rookType);

        // init knights
        let clearPieces[10]     = ChessPiece.new(Point.new(xStart + 32, 0), true, knightType);
        let clearPieces[11]     = ChessPiece.new(Point.new(xStart + (32* 6), 0), true, knightType);
        let stripePieces[10]    = ChessPiece.new(Point.new(xStart + 32, 224), false, knightType);
        let stripePieces[11]    = ChessPiece.new(Point.new(xStart + (32* 6), 224), false, knightType);


        // init bishops
        let clearPieces[12]     = ChessPiece.new(Point.new(xStart + 64, 0), true, bishopType);
        let clearPieces[13]     = ChessPiece.new(Point.new(xStart + (32 * 5), 0), true, bishopType); 
        let stripePieces[12]    = ChessPiece.new(Point.new(xStart + 64, 224), false, bishopType);
        let stripePieces[13]    = ChessPiece.new(Point.new(xStart + (32 * 5), 224), false, bishopType);

        // init queens
        let clearPieces[14]     = ChessPiece.new(Point.new(xStart + 128, 0), true, queenType);
        let stripePieces[14]    = ChessPiece.new(Point.new(xStart + 128, 224), false, queenType);

        // init kings     
        let clearPieces[15]     = ChessPiece.new(Point.new(xStart + 96, 0), true, kingType);    
        let stripePieces[15]    = ChessPiece.new(Point.new(xStart + 96, 224), false, kingType);

        return this;
    }

    method void dispose() {
        do clearPieces.dispose();
        do stripePieces.dispose();        
        do Memory.deAlloc(this);
        return;
    }

    //
    // Methods
    // 
    method void run() {
        var char key;
        var ChessPiece curPiece;    
        var ChessPiece selectedPiece;    

        do drawBoard();
        do drawPieces();

        let key = 0;
        let curPiece = clearPieces[0];
        let selectedPiece = null;
        
        do _curPosMarker.draw();

        while(~gameEnd) {
            while (key = 0) {
                let key = Keyboard.keyPressed();                
            }   

            if (key = 81)  {        // q key
                let gameEnd = true; 
            }     
            if (key = 131) {        // up arrow
                do drawBoard();
                do drawPieces();
                do _curPosMarker.moveUp(); 
            }   
            if (key = 133) {        // down arrow
                do drawBoard();
                do drawPieces();
                do _curPosMarker.moveDown(); 
            }   
            if (key = 130) {        // left arrow
                do drawBoard();
                do drawPieces();
                do _curPosMarker.moveLeft();
            }   
            if (key = 132) {        // right arrow
                do drawBoard();
                do drawPieces();
                do _curPosMarker.moveRight(); 
            }   
            if(key = 32) {          // Space bar
                if(selectedPiece = null) {
                    let selectedPiece = _curPosMarker.select(isClearTurn, clearPieces, stripePieces);
                }
                else {
                    if(~ChessPieceHelper.comparePosition(_curPosMarker.getPosition(), selectedPiece.getPosition())) {
                        if(ChessPieceHelper.canMove(selectedPiece, _curPosMarker.getPosition(), clearPieces, stripePieces)) {
                            do selectedPiece.setPosition(_curPosMarker.getPosition());
                            do drawBoard();
                            do drawPieces();
                            let selectedPiece = null;
                            do _curPosMarker.draw();
                            let isClearTurn = ~isClearTurn;
                        }
                    }
                }                
            }
            if (key = 88)  {        // X key
                 let selectedPiece = null;
            }

            // reset
            let key = 0;
            do Sys.wait(150);
        }
        return;
    }

    method void drawPieces() {
        var int i;              
        var ChessPiece curPiece;

        let i = 0;
        
        while(i < 16) {
            let curPiece = clearPieces[i];
            do ChessPieceDrawer.draw(curPiece, ChessPieceHelper.onLight(curPiece.getPosition()));
            let curPiece = stripePieces[i];
            do ChessPieceDrawer.draw(curPiece, ChessPieceHelper.onLight(curPiece.getPosition()));
            let i = i + 1;            
        }

        return;
    }
    
    method void drawBoard() {
        var int x, y, curRow, curCol;
        var int squareSize;
        var boolean color;

        let curCol      = 0;
        let curRow      = 0;
        let color       = true;
        let squareSize  = 32;
        
        // Draw squares
        while(curRow < 8) {
            while(curCol < 8) {                
                do Screen.setColor(color);
                let color = ~color;

                let x = xStart + (curCol * squareSize);
                let y = curRow * squareSize;
                do Screen.drawRectangle(x, y, x + squareSize, y + squareSize - 1);

                let curCol = curCol + 1;
            }
            let curRow = curRow + 1;
            let curCol = 0;
            let color = ~color;
        }        

        // Draw border
        do Screen.setColor(true);
        do Screen.drawLine(xStart, 0, xStart + 256, 0);
        do Screen.drawLine(xStart, 0, xStart, 255);
        do Screen.drawLine(xStart, 255, xStart + 256, 255);
        do Screen.drawLine(xStart + 256, 0, xStart + 256, 255);

        return;
    }

    
}